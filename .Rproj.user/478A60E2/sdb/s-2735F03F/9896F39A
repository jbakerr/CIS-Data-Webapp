{
    "collab_server" : "",
    "contents" : "studentlist_script <- function(stlist){\n  \n  metrics <- c(\"Math\",\"Science\",\"ELA\", \"Suspensions\", \"Attendance Rate\")\n  \n  elem <- c(\"Glenn Elementary School\", \"Eno Valley Elementary\", \"EK Powe Elementary School\", \"Merrick-Moore\")\n  high <- c(\"Shepard\", \"Durham Performance Learning Center\", \"Hillside High School\", \"Southern High School\", \"Northern\")\n  \n  #removing any fully duplicated student entries\n  stlist <- stlist[!duplicated(stlist[,c(\"Student.ID\", \"Student\",\"Birth.Date\")]), ] # This is a soft option that just deletes one of the duplicates arbitrarily\n  \n  \n  #Create average grade metric\n  \n  grades <- c(\"Q1_Science\", \"Q1_Math\", \"Q1_ELA\",\"Q2_Science\", \"Q2_Math\", \"Q2_ELA\", \"Q1_Attendance Rate\", \"Q2_Attendance Rate\", \"Q3_Science\", \"Q3_Math\", \"Q3_ELA\", \"Q3_Attendance Rate\", \"Q4_Science\", \"Q4_Math\", \"Q4_ELA\", \"Q4_Attendance Rate\")\n  \n  stlist[,colnames(stlist) %in% grades] <- sapply(stlist[,colnames(stlist) %in% grades], as.numeric )\n  \n  \n  \n  \n  stlist$avg.grade.Q1 <- 0\n  stlist$avg.grade.Q1 <- rowMeans(stlist[, c(\"Q1_Science\", \"Q1_Math\", \"Q1_ELA\")], na.rm =T)\n  \n  stlist$avg.grade.Q2 <- 0\n  stlist$avg.grade.Q2 <- rowMeans(stlist[, c(\"Q2_Science\", \"Q2_Math\", \"Q2_ELA\")], na.rm =T)\n  \n  stlist$avg.grade.Q3 <- 0\n  stlist$avg.grade.Q3 <- rowMeans(stlist[, c(\"Q3_Science\", \"Q3_Math\", \"Q3_ELA\")], na.rm =T)\n  \n  stlist$avg.grade.Q4 <- 0\n  stlist$avg.grade.Q4 <- rowMeans(stlist[, c(\"Q4_Science\", \"Q4_Math\", \"Q4_ELA\")], na.rm =T)\n  \n  \n  stlist$avg.grade <- rowMeans(stlist[, c(\"avg.grade.Q1\",\"avg.grade.Q2\", \"avg.grade.Q3\", \"avg.grade.Q4\")], na.rm = T)\n  \n  \n  stlist$avg.attend <- rowMeans(stlist[, c(\"Q1_Attendance Rate\", \"Q2_Attendance Rate\", \"Q3_Attendance Rate\", \"Q4_Attendance Rate\")], na.rm = T)\n  # \n  # #Aggregating Outcome info\n  # stlist$avgrade1 <- rowMeans(stlist[, c(\"Q1_Science\", \"Q1_Math\", \"Q1_ELA\", \"Q_\", \"Q_1 Lang. Arts\")], na.rm =T)\n  # stlist$avgrade2 <- rowMeans(stlist[, c(\"Q_2 Science\", \"Q_2 Math\", \"Q_2 Writing\", \"Q_2 Reading\", \"Q_2 Lang. Arts\")], na.rm =T)\n  # stlist$avgrade3 <- rowMeans(stlist[, c(\"Q_3 Science\", \"Q_3 Math\", \"Q_3 Writing\", \"Q_3 Reading\", \"Q_3 Lang. Arts\")], na.rm =T)# will give an error before 3rd quarter outcomes are entered\n  # stlist$avgrade4 <- rowMeans(stlist[, c(\"Q_4 Science\", \"Q_4 Math\", \"Q_4 Writing\", \"Q_4 Reading\", \"Q_4 Lang. Arts\")], na.rm =T)# will give an error before 4th quarter outcomes are entered\n  # stlist$avgrade <- rowMeans(stlist[, colnames(stlist) %in% c(\"avgrade1\", \"avgrade2\", \"avgrade3\", \"avgrade4\")], na.rm = T)\n  # stlist$nogrades <- is.na(stlist$avgrade)\n  # stlist$nogrades1 <- is.na(stlist$avgrade1)\n  # stlist$nogrades2 <- is.na(stlist$avgrade2)\n  # stlist$nogrades3 <- is.na(stlist$avgrade3)\n  # stlist$nogrades4 <- is.na(stlist$avgrade4)\n  \n  \n  \n  #Calculate Suspenion Data\n  \n  stlist$suspended <- F\n  \n  stlist$suspended <- ifelse(is.na(stlist$Q1_Suspensions) & is.na(stlist$Q2_Suspensions) & is.na(stlist$Q3_Suspensions) & is.na(stlist$Q4_Suspensions), stlist$suspended <- F, stlist$suspended <- T)\n  stlist$suspended <- ifelse(stlist$suspended == T & (stlist$Q1_Suspensions > 0 | stlist$Q2_Suspensions > 0 | stlist$Q3_Suspensions > 0 | stlist$Q4_Suspensions > 0), stlist$suspended <- T, stlist$suspended <- F)\n  \n  \n  #This section creates a new variable, criteria, which calculates the number of eligibility criteria a student meets. #####\n  \n  \n  \n  \n  \n  \n  \n  stlist$`Q_1 criteria` <- 0\n  stlist$`Q_2 criteria` <- 0\n  stlist$`Q_3 criteria` <- 0\n  stlist$`Q_4 criteria` <- 0\n  stlist$criteria <- 0\n  \n  stlist$attend_criteria <- F\n  stlist$beh_criteria <- F\n  stlist$course_criteria <- F\n  \n  criteria_cats <- c(117:120)\n  \n  abs_cats <- 9\n  \n  susp_cats <- c(13)\n  \n  q1_subjects <- c(\"Q1_Math\",\"Q1_Science\",\"Q1_ELA\")\n  q2_subjects <- c(\"Q2_Math\",\"Q2_Science\",\"Q2_ELA\")\n  q3_subjects <- c(\"Q3_Math\",\"Q3_Science\",\"Q3_ELA\")\n  q4_subjects <- c(\"Q4_Math\",\"Q4_Science\",\"Q4_ELA\")\n\n\n  for(i in q1_subjects){\n\n    stlist$`Q_1 criteria` <- ifelse(is.element(stlist$School, elem) & stlist$`Q_1 criteria` != 1 & (stlist[,i] <= 2 & !is.na(stlist[,i])), stlist$`Q_1 criteria`+ 1, stlist$`Q_1 criteria`)\n    stlist$`Q_1 criteria` <- ifelse(is.element(stlist$School, high) & stlist$`Q_1 criteria` != 1 & (stlist[,i] < 70 & !is.na(stlist[,i])), stlist$`Q_1 criteria` + 1, stlist$`Q_1 criteria`)\n\n  }\n\n\n  for(i in q2_subjects){\n\n    stlist$`Q_2 criteria` <- ifelse(is.element(stlist$School, elem) & stlist$`Q_2 criteria` != 1 & (stlist[,i] <= 2 & !is.na(stlist[,i])), stlist$`Q_2 criteria`+ 1, stlist$`Q_2 criteria`)\n    stlist$`Q_2 criteria` <- ifelse(is.element(stlist$School, high) & stlist$`Q_2 criteria` != 1 & (stlist[,i] < 70 & !is.na(stlist[,i])), stlist$`Q_2 criteria` + 1, stlist$`Q_2 criteria`)\n\n  }\n\n  for(i in q3_subjects){\n\n    stlist$`Q_3 criteria` <- ifelse(is.element(stlist$School, elem) & stlist$`Q_3 criteria` != 1 & (stlist[,i] <= 2 & !is.na(stlist[,i])), stlist$`Q_3 criteria`+ 1, stlist$`Q_3 criteria`)\n    stlist$`Q_3 criteria` <- ifelse(is.element(stlist$School, high) & stlist$`Q_3 criteria` != 1 & (stlist[,i] < 70 & !is.na(stlist[,i])), stlist$`Q_3 criteria` + 1, stlist$`Q_3 criteria`)\n\n  }\n\n  for(i in q4_subjects){\n\n    stlist$`Q_4 criteria` <- ifelse(is.element(stlist$School, elem) & stlist$`Q_4 criteria` != 1 & (stlist[,i] <= 2 & !is.na(stlist[,i])), stlist$`Q_4 criteria`+ 1, stlist$`Q_4 criteria`)\n    stlist$`Q_4 criteria` <- ifelse(is.element(stlist$School, high) & stlist$`Q_4 criteria` != 1 & (stlist[,i] < 70 & !is.na(stlist[,i])), stlist$`Q_4 criteria` + 1, stlist$`Q_4 criteria`)\n\n  }\n\n  stlist$max_criteria <- pmax(stlist$`Q_1 criteria`, stlist$`Q_2 criteria`, stlist$`Q_3 criteria`, stlist$`Q_4 criteria`)\n\n\n  stlist$course_criteria <- ifelse(stlist$max_criteria == 1, stlist$course_criteria <- T, stlist$course_criteria <- F)\n\n  stlist$`Q_1 criteria` <- ifelse(stlist$`Q1_Suspensions` == 0 | is.na(stlist$`Q1_Suspensions`) , stlist$`Q_1 criteria`, stlist$`Q_1 criteria` + 1)\n  stlist$`Q_2 criteria` <- ifelse(stlist$`Q2_Suspensions` == 0 | is.na(stlist$`Q2_Suspensions`) , stlist$`Q_2 criteria`, stlist$`Q_2 criteria` + 1)\n  stlist$`Q_3 criteria` <- ifelse(stlist$`Q3_Suspensions` == 0 | is.na(stlist$`Q3_Suspensions`) , stlist$`Q_3 criteria`, stlist$`Q_3 criteria` + 1)\n  stlist$`Q_4 criteria` <- ifelse(stlist$`Q4_Suspensions` == 0 | is.na(stlist$`Q4_Suspensions`) , stlist$`Q_4 criteria`, stlist$`Q_4 criteria` + 1)\n\n  stlist$max_criteria <- pmax(stlist$`Q_1 criteria`, stlist$`Q_2 criteria`, stlist$`Q_3 criteria`, stlist$`Q_4 criteria`)\n\n\n  stlist$beh_criteria <- ifelse(stlist$max_criteria == 2 | (stlist$max_criteria == 1 & stlist$course_criteria == F), stlist$beh_criteria <- T, stlist$beh_criteria <- F)\n\n\n  stlist$`Q_1 criteria` <- ifelse(stlist$`Q1_Attendance Rate` > 90 | is.na(stlist$`Q1_Attendance Rate`), stlist$`Q_1 criteria`, stlist$`Q_1 criteria` + 1)\n  stlist$`Q_2 criteria` <- ifelse(stlist$`Q2_Attendance Rate` > 90 | is.na(stlist$`Q2_Attendance Rate`), stlist$`Q_2 criteria`, stlist$`Q_2 criteria` + 1)\n  stlist$`Q_3 criteria` <- ifelse(stlist$`Q3_Attendance Rate` > 90 | is.na(stlist$`Q3_Attendance Rate`), stlist$`Q_3 criteria`, stlist$`Q_3 criteria` + 1)\n  stlist$`Q_4 criteria` <- ifelse(stlist$`Q4_Attendance Rate` > 90 | is.na(stlist$`Q4_Attendance Rate`), stlist$`Q_4 criteria`, stlist$`Q_4 criteria` + 1)\n\n\n  stlist$max_criteria <- pmax(stlist$`Q_1 criteria`, stlist$`Q_2 criteria`, stlist$`Q_3 criteria`, stlist$`Q_4 criteria`)\n\n  stlist$attend_criteria <- ifelse(stlist$max_criteria == 3 | (stlist$max_criteria == 1 & stlist$course_criteria == F & stlist$beh_criteria == F) |\n                                     (stlist$max_criteria == 2 & (stlist$beh_criteria == F | stlist$course_criteria == F)), stlist$attend_criteria <- T, stlist$attend_criteria <- F)\n\n\n  #Creates no-metric column\n  stlist$no_metrics <- FALSE\n  stlist$no_metrics_Q1 <- FALSE\n  stlist$no_metrics_Q2 <- FALSE\n  stlist$no_metrics_Q3 <- FALSE\n  stlist$no_metrics_Q4 <- FALSE\n\n\n  metrics_colums <- c(\"Q1_Science\", \"Q1_Math\", \"Q1_ELA\",\"Q1_Suspensions\", \"Q1_Attendance Rate\",\"Q2_Science\", \"Q2_Math\", \"Q2_ELA\",\"Q2_Suspensions\", \"Q2_Attendance Rate\",\"Q3_Science\", \"Q3_Math\", \"Q3_ELA\",\"Q3_Suspensions\", \"Q3_Attendance Rate\", \"Q4_Science\", \"Q4_Math\", \"Q4_ELA\",\"Q4_Suspensions\", \"Q4_Attendance Rate\")\n\n  stlist$no_metrics <- (rowSums(is.na(stlist[, metrics_colums])) == length(metrics_colums))\n  stlist$no_metrics_Q1 <- (rowSums(is.na(stlist[, metrics_colums[1:5]])) == length(metrics_colums[1:5]))\n  stlist$no_metrics_Q2 <- (rowSums(is.na(stlist[, metrics_colums[6:10]])) == length(metrics_colums[6:10]))\n  stlist$no_metrics_Q3 <- (rowSums(is.na(stlist[, metrics_colums[11:15]])) == length(metrics_colums[11:15]))\n  stlist$no_metrics_Q4 <- (rowSums(is.na(stlist[, metrics_colums[16:20]])) == length(metrics_colums[16:20]))\n\n\n# \n#   improve.math <- subset(stlist, stlist$School %in% high & (stlist$Q2_Math - stlist$Q1_Math) >= 10)\n#   improve.math$improve_math <- T\n#   #improve.math <- subset(improve.math, !is.na(improve.math$Name))\n# \n#   improve.elm.math <- subset(stlist, stlist$School %in% elem & ((stlist$Q2_Math - stlist$Q1_Math) + (stlist$Q3_Math - stlist$Q2_Math)  >= 1.0 ))\n#   improve.elm.math$improve_math <- T\n#   #improve.elm.math <- subset(improve.elm.math, !is.na(improve.elm.math$Name))\n# \n# \n#   improve.la <- subset(stlist, stlist$School %in% high & (stlist$Q2_ELA - stlist$Q1_ELA) >= 10)\n#   improve.la$improve_la <- T\n#   #improve.la <- subset(improve.la, !is.na(improve.la$Name))\n# \n#   improve.elm.la <- subset(stlist, stlist$School %in% elem & (stlist$Q2_ELA - stlist$Q1_ELA) + (stlist$Q3_ELA - stlist$Q2_ELA)  >= 1.0 )\n#   improve.elm.la$improve_la <- T\n#   #improve.elm.la <- subset(improve.elm.la, !is.na(improve.elm.la$Name))\n# \n#   improve.science <- subset(stlist, stlist$School %in% high & (stlist$Q2_Science - stlist$Q1_Science) >= 10)\n#   improve.science$improve_science <- T\n#   #improve.science <- subset(improve.science, !is.na(improve.science$Name))\n# \n#   improve.elm.science <- subset(stlist, stlist$School %in% elem & (stlist$Q2_Science - stlist$Q1_Science) + (stlist$Q3_Science - stlist$Q2_Science)  >= 1.0 )\n#   improve.elm.science$improve_science <- T\n#   #improve.elm.science <- subset(improve.elm.science, !is.na(improve.elm.science$Name))\n# \n# \n#   improve.elem.attend <- subset(stlist, stlist$School %in% elem  & ((stlist$`Q2_Attendance Rate` - stlist$`Q1_Attendance Rate`) + (stlist$`Q3_Attendance Rate` - stlist$`Q2_Attendance Rate`) >= 6))\n#   #improve.elem.attend <- subset(improve.elem.attend, !is.na(improve.elem.attend$Name))\n#   #elem.attend.eligible <- subset(stlist, stlist$Site %in% elem  &  (stlist$totabs1 > 3 | stlist$totabs2 > 3 | stlist$totabs3 > 3 | stlist$totabs4 > 3))\n# \n#   improve.high.attend <- subset(stlist, stlist$School %in% high  & ((stlist$`Q2_Attendance Rate` - stlist$`Q1_Attendance Rate`) + (stlist$`Q3_Attendance Rate` - stlist$`Q2_Attendance Rate`) >= 10))\n#   #improve.high.attend <- subset(improve.high.attend, !is.na(improve.high.attend$Name))\n#   #high.attend.eligible <- subset(stlist, stlist$Site %in% high  &  (stlist$totabs1 > 5 | stlist$totabs2 > 5 | stlist$totabs3 > 5 | stlist$totabs4 > 5))\n\n# \n#   improve.grades <- merge(improve.la, improve.science, all = TRUE)\n#   improve.grades <- merge(improve.grades, improve.math, all= T)\n#   improve.grades <- merge(improve.grades, improve.elm.science, all = T)\n#   improve.grades <- merge(improve.grades, improve.elm.la, all = T)\n#   improve.grades <- merge(improve.grades, improve.elm.math, all = T)\n#   improve.grades$improve.grades <- TRUE\n# \n#   improve.attend <- merge(improve.high.attend, improve.elem.attend, all = T)\n#   improve.attend$attend <- TRUE\n# \n#   stlist$improve_grades <- F\n#   stlist$improve_math <- F\n#   stlist$improve_science <- F\n#   stlist$improve_ela <- F\n#   stlist$improve_all_grades <- F\n# \n#   stlist$improve_attend <- ifelse(stlist$Student.ID %in% improve.attend$Student.ID, stlist$improve.attend <- T, stlist$improve.attend <- F)\n#   stlist$improve_grades <- ifelse(stlist$Student.ID %in% improve.grades$Student.ID, stlist$improve_grades <- T, stlist$improve_grades <- F)\n#   stlist$improve_math <- ifelse(stlist$Student.ID %in% improve.grades[improve.grades$improve_math == T, \"Student.ID\"], stlist$improve_math <- T, stlist$improve_math <- F)\n#   stlist$improve_science <- ifelse(stlist$Student.ID %in% improve.grades[improve.grades$improve_science == T, \"Student.ID\"], stlist$improve_science <- T, stlist$improve_science <- F)\n#   stlist$improve_ela <- ifelse(stlist$Student.ID %in% improve.grades[improve.grades$improve_la == T, \"Student.ID\"], stlist$improve_ela <- T, stlist$improve_ela <- F)\n#   stlist$improve_all_grades <- ifelse(stlist$improve_ela == T & stlist$improve_science == T & stlist$improve_math == T, stlist$improve_all_grades <- T, stlist$improve_all_grades <- F)\n# \n\n\n  #Bottom flagging students by percentiles (1/3)\n\n\n\n  # stlist$grade_quintile <- 2\n  # \n  # \n  # \n  # # for (school in levels(stlist$School)){\n  # for(row in 1:nrow(stlist)){\n  #   if(!is.na(stlist[row,]$avg.grade.Q1) & stlist[row,]$avg.grade.Q1 < quantile(stlist[stlist$School == stlist[row,]$School,]$avg.grade.Q1, prob = 0.33, na.rm = T)){\n  #     stlist[row,]$grade_quintile <- 1\n  #   }\n  #   else if(!is.na(stlist[row,]$avg.grade.Q1) & stlist[row,]$avg.grade.Q1 > quantile(stlist[stlist$School == stlist[row,]$School,]$avg.grade.Q1, prob = 0.67, na.rm = T)){\n  #     stlist[row,]$grade_quintile <- 3\n  #   }\n  # \n  # }\n\n\n\n  #   ifelse(stlist$School == school,\n  #     ifelse(stlist$avg.grade.Q1 < quantile(stlist[stlist$School == school,]$avg.grade.Q1, prob = 0.01, na.rm = T), stlist$grade_quintile <- 1, stlist$grade_quintile),\n  #     stlist$grade_quintile)\n  # }\n\n\n  \n  return(stlist)\n\n}",
    "created" : 1530814171889.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3351452012",
    "id" : "9896F39A",
    "lastKnownWriteTime" : 1530817755,
    "last_content_update" : 1530817755325,
    "path" : "~/Code/CIS2017-18/cis_webapp/studentlist.r",
    "project_path" : "studentlist.r",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}