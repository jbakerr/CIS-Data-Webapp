{
    "collab_server" : "",
    "contents" : "progress_import_script <- function(progress){\n  #Load Student Progress Monitoring Excel Sheet\n  \n  \n  #Setting Vectors that will be used throughout program\n  metrics <- c(\"Math\",\"Science\",\"ELA\", \"Suspensions\", \"Attendance Rate\")\n  \n  elem <- c(\"Glenn Elementary School\", \"Eno Valley Elementary\", \"EK Powe Elementary School\", \"Merrick-Moore\")\n  high <- c(\"Shepard\", \"Durham Performance Learning Center\", \"Hillside High School\", \"Southern High School\", \"Northern\")\n  #Rename Grading Quarters - make sure that the column numbers are acurate \n  colnames(progress)[11:14] <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  \n  \n  #Changing Metric Title - make sure that the first section in quotes is exactly as found in the excel file. \n  progress$Metric[progress$Metric =='Core Course Grades: Eng/Lang Arts/Reading/Writing'] <- \"ELA\"\n  progress$Metric[progress$Metric =='Core Course Grades: Math 1'] <- \"Math\"\n  progress$Metric[progress$Metric =='Core Course Grades: Science'] <- \"Science\"\n  progress <- progress[ ! (progress$Metric =='Standardized test score: English / Language Arts'),]\n  progress <- progress[ ! (progress$Metric =='Standardized test score: Science'),]\n  \n  \n  progress <- progress[,c(1:8, 9:12,21,13, 14:20)]\n  \n\n  #Changing\n  colnames(progress)[4] <- c(\"Student\")\n\n  #Dropping Unneeded Columns\n  progress$Latest.Progress <- NULL\n  progress$Target.Set.Date <- NULL\n  progress$Affiliate <- NULL\n  progress$Enrollment.End.Date <- NULL\n  progress$School.Year <- NULL\n  progress$Baseline.Date <- NULL\n  progress$Goal <- NULL\n\n  #removing unwanted metrics - if the column title doesn't apear in the list of metrics from the environment.r script, then they will be deleted.\n  progress <- subset(progress, progress$Metric %in% metrics)\n\n\n  #Adjusting Attendance Rate from days to percentage not needed any because of CISDM auto calculation. Leaving it in in case that changes.\n  #\n  # elem.adjust <- progress$Q1[progress$Metric == \"Attendance Rate\" & !is.na(progress$Q1) & (progress$School %in% elem) & progress$Q1 < 50]\n  # elem.adjust <- (45-elem.adjust)/45\n  # elem.adjust <- elem.adjust * 100\n  #\n  # progress$Q1[progress$Metric == \"Attendance Rate\" & progress$School %in% elem & progress$Q1 < 50 & !is.na(progress$Q1)] <- elem.adjust\n  #\n  # high.adjust <- progress$Q1[progress$Metric == \"Attendance Rate\" & !is.na(progress$Q1) & (progress$School %in% high) & progress$Q1 < 1]\n  # high.adjust <- high.adjust *100\n  #\n  # progress$Q1[progress$Metric == \"Attendance Rate\" & !is.na(progress$Q1) & (progress$School %in% high) & progress$Q1 < 1] <- high.adjust\n  #\n\n\n  #Creating Names for each quarter / subject combination\n\n  progress <- gather(progress, Period, Value, Baseline:Q4, factor_key = T)\n  quartersubject <- paste(progress$Period, \"_\", progress$Metric, sep = \"\")\n  progress$quartersubject <- quartersubject\n\n\n  #removing duplicates\n  # This is a soft option that just deletes one of the duplicates arbitrarily\n\n  progress <- progress[!duplicated(progress[,c(\"School\", \"Student\", \"Metric\", \"Value\", \"Student.ID\", \"Period\", \"Enrollment.Status\")]), ]\n\n  #Creating a wide data frame\n  progress <- spread(progress[, ! colnames(progress) %in% c(\"Metric\", \"Period\")], quartersubject, Value)\n\n  # Checking for incomplete progress monitoring settups. If a studuent is missing baseline or goal data they will be flagged as TRUE\n  progress$attend_error <- ifelse(is.na(progress$`Baseline_Attendance Rate`) & is.na(progress$`Target_Attendance Rate`), TRUE, FALSE)\n  progress$math_error <- ifelse(is.na(progress$Baseline_Math) & is.na(progress$Target_Math), TRUE, FALSE)\n  progress$science_error <- ifelse(is.na(progress$Baseline_Science) & is.na(progress$Target_Science), TRUE, FALSE)\n  progress$ELA_error <- ifelse(is.na(progress$Baseline_ELA) & is.na(progress$Target_ELA), TRUE, FALSE)\n  progress$suspension_error <- ifelse(is.na(progress$Baseline_Suspensions) & is.na(progress$Target_Suspensions), TRUE, FALSE)\n  progress$error <- ifelse(progress$attend_error == T | progress$math_error == T | progress$science_error == T | progress$ELA_error == T, TRUE, FALSE)\n\n  #Removing Baseline and Target data now that it isn't relevant\n  progress$`Baseline_Attendance Rate` <- NULL\n  progress$Baseline_ELA <- NULL\n  progress$Baseline_Math <- NULL\n  progress$Baseline_Science <- NULL\n  progress$Baseline_Suspensions <- NULL\n\n  progress$Target_ELA <- NULL\n  progress$`Target_Attendance Rate` <- NULL\n  progress$Target_Math <- NULL\n  progress$Target_Suspensions <- NULL\n  progress$Target_Science <- NULL\n\n  progress[,c(1:2, 4:6)] <- NULL\n  progress$Student.ID <- as.character(progress$Student.ID)\n  progress$Enrollment.Status <- NULL\n\n\n\n  # # age_years <- function(earlier, later)\n  # # {\n  # #   lt <- data.frame(earlier, later)\n  # #   age <- as.numeric(format(lt[,2],format=\"%Y\")) - as.numeric(format(lt[,1],format=\"%Y\"))\n  # #   \n  # #   dayOnLaterYear <- ifelse(format(lt[,1],format=\"%m-%d\")!=\"02-29\",\n  # #                            as.Date(paste(format(lt[,2],format=\"%Y\"),\"-\",format(lt[,1],format=\"%m-%d\"),sep=\"\")),\n  # #                            ifelse(as.numeric(format(later,format=\"%Y\")) %% 400 == 0 | as.numeric(format(later,format=\"%Y\")) %% 100 != 0 & as.numeric(format(later,format=\"%Y\")) %% 4 == 0,\n  # #                                   as.Date(paste(format(lt[,2],format=\"%Y\"),\"-\",format(lt[,1],format=\"%m-%d\"),sep=\"\")),\n  # #                                   as.Date(paste(format(lt[,2],format=\"%Y\"),\"-\",\"02-28\",sep=\"\"))))\n  # #   \n  # #   age[which(dayOnLaterYear > lt$later)] <- age[which(dayOnLaterYear > lt$later)] - 1\n  # #   \n  # #   age\n  # # }\n  # # \n  # # \n  # # progress$Birth.Date <- as.Date(progress$Birth.Date)\n  # # \n  # # progress$age <- age_years(progress$Birth.Date, Sys.Date())\n  # # \n  \n  # \n  # \n  return(progress)\n  \n}\n  \n  \n  \n  \n",
    "created" : 1530812596272.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "437477161",
    "id" : "ACCC096E",
    "lastKnownWriteTime" : 1530814353,
    "last_content_update" : 1530816959664,
    "path" : "~/Code/CIS2017-18/cis_webapp/progress_monitoring.R",
    "project_path" : "progress_monitoring.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}