runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
aggregate(services$Student.Support.Name, by=list(Category=services$Student.Support.Name), FUN=sum)
aggregate(services$hours, by=list(Category=services$Student.Support.Name), FUN=sum)
aggregate(services$Hours, by=list(Category=services$Student.Support.Name), FUN=sum)
runApp()
runApp()
runApp()
runApp()
deployApp()
library(rsconnect)
deployApp()
shiny::runApp()
deployApp()
library(rsconnect)
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('app.r')
deployApp()
library(shiny); source('app.r')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shinyApp(ui = ui, server = server)
runApp()
library("dplyr")
library("shiny")
data("world.cities", package = "maps")
ui <- fluidPage(
sliderInput(inputId = "n", label = "n", min = 10, max = 30, value = 10),
selectInput(inputId = "cities", label = "Select City", choices = NULL)
)
server <- function(input, output, session) {
choices_cities <- reactive({
choices_cities <- world.cities %>%
arrange(desc(pop)) %>%
top_n(n = input$n, wt = pop)
})
observe({
updateSelectInput(session = session, inputId = "cities", choices = choices_cities()$name)
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
test <- read.csv("/Users/baker/Downloads/studentlist (6).csv")
View(test)
str(test$Student.ID)
test$Student.ID <- as.character(test$Student.ID)
setwd("~/Desktop")
/Users/baker/Downloads/studentlist (6).csv
write.csv(test, "test.csv")
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
check_studentlist <- function(input){
if(!is.null(input$studentlist)){
return(TRUE)
}
else{
if (is.null(input$caselist)){
return(FALSE)
}
else if (is.null(input$services)){
return(FALSE)
}
else if (is.null(input$progress)){
return(FALSE)
}
else if (is.null(input$studentlist)){
return(FALSE)
}
else{
return(TRUE)
}
}
}
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
deployApp()
deployApp()
library(rsconnect)
deployApp()
deployApp()
setwd("~Code/cis_webapp")
setwd("~/Code/cis_webapp")
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
runApp()
shiny::runApp()
setwd('~/Code/cis_webapp')
setwd('~/Code/cis_webapp')
suppressWarnings(source("tier1.r", local = T))
suppressWarnings(source("site_coordination.r", local = T))
suppressWarnings(source('services.r', local= T))
suppressWarnings(source('caselist.r', local = T))
suppressWarnings(source('progress_monitoring.r', local = T))
suppressWarnings(source('studentlist.r', local = T))
suppressWarnings(source('service_prep.r', local = T))
suppressWarnings(source('functions.r', local = T))
setwd("/Volumes/GoogleDrive/Team Drives/Data/CISDM Files")
caselist <- read.xlsx(
caselist$datapath, sheet = 1, colNames = T, startRow = 2, detectDates = T
)
caselist <- caselist <- caselist_script(caselist)
setwd('~/Code/cis_webapp')
suppressWarnings(source("tier1.r", local = T))
suppressWarnings(source("site_coordination.r", local = T))
suppressWarnings(source('services.r', local= T))
suppressWarnings(source('caselist.r', local = T))
suppressWarnings(source('progress_monitoring.r', local = T))
suppressWarnings(source('studentlist.r', local = T))
suppressWarnings(source('service_prep.r', local = T))
suppressWarnings(source('functions.r', local = T))
setwd("/Volumes/GoogleDrive/Team Drives/Data/CISDM Files")
caselist <- read.xlsx('caselist.xlsx', sheet = 1, colNames = T, startRow = 2, detectDates = T)
caselist <- caselist <- caselist_script(caselist)
progress <- read.xlsx("progress.xlsx", sheet = 1, colNames = T, startRow = 1, detectDates = T)
progress <- progress_import_script(progress)
services <- read.xlsx("services.xlsx", sheet = 1, colNames = T, startRow = 2)
services <- service_script(services)
data <- service_script(services)
data <- read.xlsx("services.xlsx", sheet = 1, colNames = T, startRow = 2)
data <- read.xlsx("services.xlsx", sheet = 1, colNames = T, startRow = 2)
data <- service_script(services)
data <- read.xlsx("services.xlsx", sheet = 1, colNames = T, startRow = 2)
data <- service_script(data)
studentlist_test <- studentlist_creation(caselist, progress, data)
warnings()
studentlist <-merge(caselist, progress, by = "Student.ID", all = T)
stserv <- prep_service_file(data)
stlist <- merge(studentlist, stserv, by = "Student.ID", all = T)
studentlist <- studentlist_script(stlist)
setwd('~/Code/cis_webapp')
suppressWarnings(source("tier1.r", local = T))
suppressWarnings(source("site_coordination.r", local = T))
suppressWarnings(source('services.r', local= T))
suppressWarnings(source('caselist.r', local = T))
suppressWarnings(source('progress_monitoring.r', local = T))
suppressWarnings(source('studentlist.r', local = T))
suppressWarnings(source('service_prep.r', local = T))
suppressWarnings(source('functions.r', local = T))
setwd("/Volumes/GoogleDrive/Team Drives/Data/CISDM Files")
caselist <- read.xlsx('caselist.xlsx', sheet = 1, colNames = T, startRow = 2, detectDates = T)
caselist <- caselist <- caselist_script(caselist)
progress <- read.xlsx("progress.xlsx", sheet = 1, colNames = T, startRow = 1, detectDates = T)
progress <- progress_import_script(progress)
data <- read.xlsx("services.xlsx", sheet = 1, colNames = T, startRow = 2)
data <- service_script(data)
studentlist <-merge(caselist, progress, by = "Student.ID", all = T)
stserv <- prep_service_file(data)
stlist <- merge(studentlist, stserv, by = "Student.ID", all = T)
metrics <- c("Math","Science","ELA", "Suspensions", "Attendance Rate")
elem <- c("Glenn Elementary School", "Eno Valley Elementary", "EK Powe Elementary School", "Merrick-Moore")
high <- c("Shepard", "Durham Performance Learning Center", "Hillside High School", "Southern High School", "Northern")
stlist <- stlist[!duplicated(stlist[,c("Student.ID", "Student","Birth.Date")]), ] # This is a soft option that just deletes one of the duplicates arbitrarily
grades <- c("Q1_Science", "Q1_Math", "Q1_ELA","Q2_Science", "Q2_Math", "Q2_ELA", "Q1_Attendance Rate", "Q2_Attendance Rate", "Q3_Science", "Q3_Math", "Q3_ELA", "Q3_Attendance Rate", "Q4_Science", "Q4_Math", "Q4_ELA", "Q4_Attendance Rate")
stlist[,colnames(stlist) %in% grades] <- sapply(stlist[,colnames(stlist) %in% grades], as.numeric )
stlist$avg.grade.Q1 <- 0
stlist$avg.grade.Q1 <- rowMeans(stlist[, c("Q1_Science", "Q1_Math", "Q1_ELA")], na.rm =T)
stlist$avg.grade.Q2 <- 0
stlist$avg.grade.Q2 <- rowMeans(stlist[, c("Q2_Science", "Q2_Math", "Q2_ELA")], na.rm =T)
stlist$avg.grade.Q3 <- 0
stlist$avg.grade.Q3 <- rowMeans(stlist[, c("Q3_Science", "Q3_Math", "Q3_ELA")], na.rm =T)
stlist$avg.grade.Q4 <- 0
stlist$avg.grade.Q4 <- rowMeans(stlist[, c("Q4_Science", "Q4_Math", "Q4_ELA")], na.rm =T)
stlist$avg.grade <- rowMeans(stlist[, c("avg.grade.Q1","avg.grade.Q2", "avg.grade.Q3", "avg.grade.Q4")], na.rm = T)
stlist$avg.attend <- rowMeans(stlist[, c("Q1_Attendance Rate", "Q2_Attendance Rate", "Q3_Attendance Rate", "Q4_Attendance Rate")], na.rm = T)
stlist$suspended <- F
stlist$suspended <- ifelse(is.na(stlist$Q1_Suspensions) & is.na(stlist$Q2_Suspensions) & is.na(stlist$Q3_Suspensions) & is.na(stlist$Q4_Suspensions), stlist$suspended <- F, stlist$suspended <- T)
stlist$suspended <- ifelse(stlist$suspended == T & (stlist$Q1_Suspensions > 0 | stlist$Q2_Suspensions > 0 | stlist$Q3_Suspensions > 0 | stlist$Q4_Suspensions > 0), stlist$suspended <- T, stlist$suspended <- F)
stlist$`Q_1 criteria` <- 0
stlist$`Q_2 criteria` <- 0
stlist$`Q_3 criteria` <- 0
stlist$`Q_4 criteria` <- 0
stlist$criteria <- 0
stlist$attend_criteria <- F
stlist$beh_criteria <- F
stlist$course_criteria <- F
criteria_cats <- c(117:120)
abs_cats <- 9
susp_cats <- c(13)
q1_subjects <- c("Q1_Math","Q1_Science","Q1_ELA")
q2_subjects <- c("Q2_Math","Q2_Science","Q2_ELA")
q3_subjects <- c("Q3_Math","Q3_Science","Q3_ELA")
q4_subjects <- c("Q4_Math","Q4_Science","Q4_ELA")
for(i in q1_subjects){
stlist$`Q_1 criteria` <- ifelse(is.element(stlist$School, elem) & stlist$`Q_1 criteria` != 1 & (stlist[,i] <= 2 & !is.na(stlist[,i])), stlist$`Q_1 criteria`+ 1, stlist$`Q_1 criteria`)
stlist$`Q_1 criteria` <- ifelse(is.element(stlist$School, high) & stlist$`Q_1 criteria` != 1 & (stlist[,i] < 70 & !is.na(stlist[,i])), stlist$`Q_1 criteria` + 1, stlist$`Q_1 criteria`)
}
for(i in q2_subjects){
stlist$`Q_2 criteria` <- ifelse(is.element(stlist$School, elem) & stlist$`Q_2 criteria` != 1 & (stlist[,i] <= 2 & !is.na(stlist[,i])), stlist$`Q_2 criteria`+ 1, stlist$`Q_2 criteria`)
stlist$`Q_2 criteria` <- ifelse(is.element(stlist$School, high) & stlist$`Q_2 criteria` != 1 & (stlist[,i] < 70 & !is.na(stlist[,i])), stlist$`Q_2 criteria` + 1, stlist$`Q_2 criteria`)
}
for(i in q3_subjects){
stlist$`Q_3 criteria` <- ifelse(is.element(stlist$School, elem) & stlist$`Q_3 criteria` != 1 & (stlist[,i] <= 2 & !is.na(stlist[,i])), stlist$`Q_3 criteria`+ 1, stlist$`Q_3 criteria`)
stlist$`Q_3 criteria` <- ifelse(is.element(stlist$School, high) & stlist$`Q_3 criteria` != 1 & (stlist[,i] < 70 & !is.na(stlist[,i])), stlist$`Q_3 criteria` + 1, stlist$`Q_3 criteria`)
}
for(i in q4_subjects){
stlist$`Q_4 criteria` <- ifelse(is.element(stlist$School, elem) & stlist$`Q_4 criteria` != 1 & (stlist[,i] <= 2 & !is.na(stlist[,i])), stlist$`Q_4 criteria`+ 1, stlist$`Q_4 criteria`)
stlist$`Q_4 criteria` <- ifelse(is.element(stlist$School, high) & stlist$`Q_4 criteria` != 1 & (stlist[,i] < 70 & !is.na(stlist[,i])), stlist$`Q_4 criteria` + 1, stlist$`Q_4 criteria`)
}
stlist$max_criteria <- pmax(stlist$`Q_1 criteria`, stlist$`Q_2 criteria`, stlist$`Q_3 criteria`, stlist$`Q_4 criteria`)
stlist$course_criteria <- ifelse(stlist$max_criteria == 1, stlist$course_criteria <- T, stlist$course_criteria <- F)
stlist$`Q_1 criteria` <- ifelse(stlist$`Q1_Suspensions` == 0 | is.na(stlist$`Q1_Suspensions`) , stlist$`Q_1 criteria`, stlist$`Q_1 criteria` + 1)
stlist$`Q_2 criteria` <- ifelse(stlist$`Q2_Suspensions` == 0 | is.na(stlist$`Q2_Suspensions`) , stlist$`Q_2 criteria`, stlist$`Q_2 criteria` + 1)
stlist$`Q_3 criteria` <- ifelse(stlist$`Q3_Suspensions` == 0 | is.na(stlist$`Q3_Suspensions`) , stlist$`Q_3 criteria`, stlist$`Q_3 criteria` + 1)
stlist$`Q_4 criteria` <- ifelse(stlist$`Q4_Suspensions` == 0 | is.na(stlist$`Q4_Suspensions`) , stlist$`Q_4 criteria`, stlist$`Q_4 criteria` + 1)
stlist$max_criteria <- pmax(stlist$`Q_1 criteria`, stlist$`Q_2 criteria`, stlist$`Q_3 criteria`, stlist$`Q_4 criteria`)
stlist$beh_criteria <- ifelse(stlist$max_criteria == 2 | (stlist$max_criteria == 1 & stlist$course_criteria == F), stlist$beh_criteria <- T, stlist$beh_criteria <- F)
stlist$`Q_1 criteria` <- ifelse(stlist$`Q1_Attendance Rate` > 90 | is.na(stlist$`Q1_Attendance Rate`), stlist$`Q_1 criteria`, stlist$`Q_1 criteria` + 1)
stlist$`Q_2 criteria` <- ifelse(stlist$`Q2_Attendance Rate` > 90 | is.na(stlist$`Q2_Attendance Rate`), stlist$`Q_2 criteria`, stlist$`Q_2 criteria` + 1)
stlist$`Q_3 criteria` <- ifelse(stlist$`Q3_Attendance Rate` > 90 | is.na(stlist$`Q3_Attendance Rate`), stlist$`Q_3 criteria`, stlist$`Q_3 criteria` + 1)
stlist$`Q_4 criteria` <- ifelse(stlist$`Q4_Attendance Rate` > 90 | is.na(stlist$`Q4_Attendance Rate`), stlist$`Q_4 criteria`, stlist$`Q_4 criteria` + 1)
stlist$max_criteria <- pmax(stlist$`Q_1 criteria`, stlist$`Q_2 criteria`, stlist$`Q_3 criteria`, stlist$`Q_4 criteria`)
stlist$attend_criteria <- ifelse(stlist$max_criteria == 3 | (stlist$max_criteria == 1 & stlist$course_criteria == F & stlist$beh_criteria == F) |
(stlist$max_criteria == 2 & (stlist$beh_criteria == F | stlist$course_criteria == F)), stlist$attend_criteria <- T, stlist$attend_criteria <- F)
stlist$First.CIS.Enrollment.Date <- as.Date(stlist$First.CIS.Enrollment.Date)
start_year <-  as.integer(format(Sys.Date(), "%Y"))
if (as.Date(Sys.Date()) > as.Date(paste(start_year, "-08-15", sep = "")) &
as.Date(Sys.Date()) < as.Date(paste(start_year, "-12-31", sep = ""))){
start_year <- start_year
} else{
start_year <- start_year - 1
}
Q1_date <- as.Date(paste(start_year, "-10-31", sep = ""))
Q2_date <- as.Date(paste(start_year + 1, "-01-15", sep = ""))
Q3_date <- as.Date(paste(start_year + 1, "-03-31", sep = ""))
Q4_date <- as.Date(paste(start_year + 1, "-06-10", sep = ""))
stlist$no_metrics <- FALSE
stlist$no_metrics_Q1 <- FALSE
stlist$no_metrics_Q2 <- FALSE
stlist$no_metrics_Q3 <- FALSE
stlist$no_metrics_Q4 <- FALSE
View(stlist)
metrics_colums <- c("Q1_Science", "Q1_Math", "Q1_ELA","Q1_Suspensions", "Q1_Attendance Rate","Q2_Science", "Q2_Math", "Q2_ELA","Q2_Suspensions", "Q2_Attendance Rate","Q3_Science", "Q3_Math", "Q3_ELA","Q3_Suspensions", "Q3_Attendance Rate", "Q4_Science", "Q4_Math", "Q4_ELA","Q4_Suspensions", "Q4_Attendance Rate")
stlist$no_metrics_Q1 <- ifelse(Sys.Date() > Q1_date &
stlist$First.CIS.Enrollment.Date < Q1_date,
stlist$no_metrics_Q1 <- (rowSums(is.na(stlist[, metrics_colums[1:5]])) > 1 ),
stlist$no_metrics_Q1 <- FALSE)
stlist$no_metrics_Q2 <- ifelse(Sys.Date() > Q2_date &
stlist$First.CIS.Enrollment.Date < Q2_date,
stlist$no_metrics_Q2 <- (rowSums(is.na(stlist[, metrics_colums[6:10]])) > 1 ),
stlist$no_metrics_Q2 <- FALSE)
stlist$no_metrics_Q3 <- ifelse(Sys.Date() > Q3_date &
stlist$First.CIS.Enrollment.Date < Q3_date,
stlist$no_metrics_Q3 <- (rowSums(is.na(stlist[, metrics_colums[11:15]])) > 1 ),
stlist$no_metrics_Q3 <- FALSE)
stlist$no_metrics_Q4 <- ifelse(Sys.Date() > Q4_date &
stlist$First.CIS.Enrollment.Date < Q4_date,
stlist$no_metrics_Q4 <- (rowSums(is.na(stlist[, metrics_colums[16:20]])) > 1),
stlist$no_metrics_Q4 <- FALSE)
stlist$no_metrics <- apply(stlist[,66:69], 1, any)
return(stlist)
stlist$no_metrics_Q4 <- ifelse(Sys.Date() > Q4_date &
stlist$First.CIS.Enrollment.Date < Q4_date,
stlist$no_metrics_Q4 <- (rowSums(is.na(stlist[, metrics_colums[16:20]])) > 1),
stlist$no_metrics_Q4 <- FALSE)
stlist$no_metrics <- apply(stlist[,66:69], 1, any)
stlist$no_metrics <- apply(stlist[,68:71], 1, any)
runApp('~/Code/cis_webapp')
library(openxlsx)
setwd('~/Downloads')
caselist <- read.xlsx('caselist.xlsx', startRow = 2, colNames = T, sheet = 1, detectDates = T)
View(caselist)
View(caselist)
caselist <- read.xlsx('caselist.xlsx', startRow = 2, colNames = T, sheet = 1, detectDates = T)
ls()
wd(ls())
wd()
getwd(ls())
getwd()
progress <- read.xlsx('progress.xlsx', startRow = 1, colNames = T, sheet = 1, detectDates = T)
caselist <- read.xlsx('caselist.xlsx', startRow = 2, colNames = T, sheet = 1, detectDates = T)
View(caselist)
caselist <- read.xlsx('caselist.xlsx', startRow = 1, colNames = T, sheet = 1, detectDates = T)
caselist <- read.xlsx('caselist.xlsx', startRow = 2, colNames = T, sheet = 1, detectDates = F)
sessionInfo('openxlsx')
caselist_wb <- loadWorkbook('caselist.xlsx')
openXL(caselist_wb)
caselist <- read.xlsx(caselist_wb, startRow = 2, colNames = T, sheet = 1, detectDates = T)
View(caselist)
caselist_wb <- loadWorkbook('caselist.xlsx')
caselist <- read.xlsx(caselist_wb, startRow = 2, colNames = T, sheet = 1, detectDates = T)
sessioninfo()
sessionInfo()
install.packages("devtools")
devtools::install_github("AndreaCirilloAC/updateR")
updateR(admin_password = 'thebeast')
library(updateR)
updateR(admin_password = 'thebeast')
thebeast
install.packages(as.vector(needed_packages))
updateR(admin_password = 'thebeast')
library(updateR)
sessionInfo()
library(openxlsx)
install.packages("dplyr") # These packages need to be installed once, after that they can be called up using library. This package is for restructuring data
install.packages("tidyr")
install.packages("plyr")
install.packages("lubridate")
install.packages('openxlsx')
install.packages("devtools")
install.packages("shiny")
library(openxlsx)
install.packages('openxlsx')
library(openxlsx)
install.packages('Rcpp')
library(openxlsx)
update.packages()
library(openxlsx)
install.packages('zip')
library(openxlsx)
caselist <- read.xlsx('caselist.xlsx', startRow = 2, colNames = T, sheet = 1, detectDates = T)
caselist <- read.xlsx('caselist.xlsx', startRow = 2, colNames = T, sheet = 1, detectDates = T)
setwd('~/Downloads')
caselist <- read.xlsx('caselist.xlsx', startRow = 2, colNames = T, sheet = 1, detectDates = T)
View(caselist)
colNames
caselist <- read.xlsx('caselist.xlsx', startRow = 2, colNames = T, sheet = 1, detectDates = T)
shiny::runApp('~/Code/cis_webapp')
install.packages('digest')
shiny::runApp('~/Code/cis_webapp')
install.packages('shiny')
shiny::runApp('~/Code/cis_webapp')
install.packages('htmltools')
shiny::runApp('~/Code/cis_webapp')
install.packages()
install.packages(Library)
install.packages(.Library)
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
pkgs <- installed.packages()
ii <- is.na(pkgs[, "Priority"])
pkgs <- pkgs[ii, 1]
install.packages(pkgs)
install.packages(pkgs)
shiny::runApp('~/Code/cis_webapp')
caselist <- read.xlsx('caselist.xlsx', startRow = 2, colNames = T, sheet = 1, detectDates = T)
caselist <- read.xlsx('caselist copy.xlsx', startRow = 2, colNames = T, sheet = 1, detectDates = T)
View(caselist)
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
source('~/Code/cis_webapp/app.r')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
runApp('~/Code/cis_webapp')
library(readxl)
library(readxl)
setwd("~/Downloads")
caselist <- read_excel('caselist.xlsx', sheet = 1,skip = 1)
View(caselist)
caselist$`Enrollment Status`
as.Date(caselist$`Birth Date`
as.Date(caselist$`Birth Date`)
as.Date(caselist$`Birth Date`, origin = "1899-12-30")
nms <- names(read_excel('caselist.xlsx', n_max = 0))
ct <- ifelse(grepl("^Date", nms), "date", "guess"))
ct <- ifelse(grepl("^Date", nms), "date", "guess")
caselist <- read_excel('caselist.xlsx', sheet = 1,skip = 1, col_types = ct)
View(caselist)
nms
ct <- ifelse(grepl("Date", nms), "date", "guess")
caselist <- read_excel('caselist.xlsx', sheet = 1,skip = 1, col_types = ct)
^
ct <- ifelse(grepl("^Date", nms), "date", "guess")
caselist <- read_excel('caselist.xlsx', sheet = 1,skip = 1, col_types = ct)
View(caselist)
ct <- ifelse(grepl("^date", nms), "date", "guess")
caselist <- read_excel('caselist.xlsx', sheet = 1,skip = 1, col_types = ct)
ct
ct <- ifelse(grepl("^Date", nms), "date", "guess")
ct
nms
ct <- ifelse(grepl("Date", nms), "date", "guess")
ct
x
nms <- names(read_excel('caselist.xlsx', n_max = 0))
ct <- ifelse(grepl("Date", nms), "date", "guess")
caselist <- read_excel('caselist.xlsx', sheet = 1,skip = 1, col_types = ct)
warnings()
caselist <- read_excel('caselist.xlsx', sheet = 1,skip = 1, col_types = ct)
nms <- names(read_excel('services.xlsx', n_max = 0))
ct <- ifelse(grepl("Date", nms), "date", "guess")
ct
caselist <- read_excel('services.xlsx', sheet = 1,skip = 1, col_types = ct)
View(services)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
